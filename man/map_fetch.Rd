% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/map_fetch.R
\name{map_fetch}
\alias{map_fetch}
\title{Fetch aggregated density maps of GBIF occurrences}
\usage{
map_fetch(source = "density", x = 0, y = 0, z = 0, format = "@1x.png",
  srs = "EPSG:4326", bin = NULL, hexPerTile = NULL, squareSize = NULL,
  style = "classic.point", search = NULL, id = NULL, year = NULL,
  basisOfRecord = NULL, ...)
}
\arguments{
\item{source}{(character): Either density for fast, precalculated tiles,
or adhoc for any search. \code{default = "density"}}

\item{x}{(integer): the zoom. \code{default = 0}}

\item{y}{(integer): the column. \code{default = 0}}

\item{z}{(integer): the row. \code{default = 0}}

\item{format}{(character):
.mvt for a vector tile
/@Hx.png for a 256px raster tile (for legacy clients)
/@1x.png for a 512px raster tile
/@2x.png for a 1024px raster tile
/@3x.png for a 2048px raster tile
/@4x.png for a 4096px raster tile}

\item{srs}{(character):
Spatial reference system. One of:
EPSG:3857 (Web Mercator)
EPSG:4326 (WGS84 plate care?)
EPSG:3575 (Arctic LAEA)
EPSG:3031 (Antarctic stereographic)
see below under Projections.\preformatted{@param bin (optional): square or hex to aggregate occurrence counts into 
squares or hexagons. Points by default.

@param hexPerTile (optional): sets the size of the hexagons 
(the number horizontally across a tile)

@param squareSize (optional): sets the size of the squares. Choose a factor 
of 4096 so they tessalate correctly: probably from 8, 16, 32, 64, 128, 
256, 512.

@param style (optional): for raster tiles, choose from the available styles. 
Defaults to classic.point.

@param search (optional): defines what type of subset of all GBIF data to 
return. Should be one of c("taxonKey", "datasetKey", "country", "publisher",
"publishingCountry"). Without any search parameter, all occurrences will be 
returned.

@param id (optional): defines the value to be used as filter criterium in 
the category supplied by `search`. Appropriate values depend on the
search category that is used, for example integer for 
`search = "taxonKey"`. Has to be provided if 
`search` parameter is specified.

@param year (optional): integer that limits the search to a certain year or, 
if passing a vector of integers,, multiple years, for example
`1984` or `c(2016, 2017, 2018)`.

@param basisOfRecord (optional): character or character vector to include 
records with that basis of record. The full list is: `c("OBSERVATION", 
"HUMAN_OBSERVATION", "MACHINE_OBSERVATION", "MATERIAL_SAMPLE", 
"PRESERVED_SPECIMEN", "FOSSIL_SPECIMEN", "LIVING_SPECIMEN", 
"LITERATURE", "UNKNOWN")`.
}}
}
\value{
###???
}
\description{
This function is a wrapper for the GBIF mapping api version 2.0.
The mapping API is a web map tile service making it straightforward to
visualize GBIF content on interactive maps, and overlay content from other
sources. It returns tile maps or vector maps with number of
GBIF records per area unit that can be used in a variety of ways, for example
in interactive leaflet web maps. Map details are specified by a number of
query parameters, some of them optional. Full documentation of the GBIF
mapping api can be found at https://www.gbif.org/developer/maps
}
\details{
This function uses the arguments passed on to generate a query
to the GBIF web map API. The API returns a web tile object as png that can be
read and converted into an R raster object. The break values or nbreaks
generate a custom colour palette for the web tile, with each bin
corresponding to one grey value. After retrieval, the raster is reclassified
to the actual break values. This is a somewhat hacky but nonetheless
functional solution in the absence of a GBIF raster API implementation.
}
\examples{
\dontrun{}
}
\references{
\url{https://www.gbif.org/developer/maps}
}
\author{
Laurens Geffert, \email{laurensgeffert@gmail.com}
}
\keyword{GBIF}
\keyword{map,}
\keyword{tile,}
\keyword{web}
